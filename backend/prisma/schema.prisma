// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  username      String   @unique
  displayName   String?  @map("display_name")
  bio           String?
  avatarUrl     String?  @map("avatar_url")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  posts                    Post[]
  comments                 Comment[]
  likes                    Like[]
  following                Follow[] @relation("UserFollowing")
  followers                Follow[] @relation("UserFollowers")
  subscriptions            Subscription[]
  worryResolutions         WorryResolution[]
  exerciseCompletions      UserExerciseCompletion[]
  exerciseProgress         ExerciseProgress[]
  notifications            Notification[]
  notificationPreferences  NotificationPreferences?
  languagePreference       UserLanguagePreference?
  commentReports           CommentReport[] @relation("CommentReports")

  @@map("users")
}

model Post {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  shortContent     String    @map("short_content")
  longContent      String?   @map("long_content")
  worryPrompt      String    @map("worry_prompt")
  privacyLevel     String    @map("privacy_level") // 'public', 'friends', 'private'
  commentsEnabled  Boolean   @default(true) @map("comments_enabled")
  isScheduled      Boolean   @default(false) @map("is_scheduled")
  scheduledFor     DateTime? @map("scheduled_for")
  publishedAt      DateTime? @map("published_at")
  detectedLanguage String?   @map("detected_language")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  likes            Like[]
  worryAnalysis    WorryAnalysis?
  worryResolution  WorryResolution?
  exerciseCompletions UserExerciseCompletion[]

  @@map("posts")
}

model Comment {
  id                String    @id @default(uuid())
  postId            String    @map("post_id")
  userId            String    @map("user_id")
  content           String
  moderationStatus  String    @default("pending") @map("moderation_status") // 'approved', 'flagged', 'rejected', 'pending'
  moderationScore   Decimal?  @map("moderation_score") @db.Decimal(5, 2)
  parentCommentId   String?   @map("parent_comment_id")
  detectedLanguage  String?   @map("detected_language")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Comment[] @relation("CommentReplies")
  moderationQueue ModerationQueue?
  reports         CommentReport[]

  @@map("comments")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, postId])
  @@map("likes")
}

model Subscription {
  id                      String    @id @default(uuid())
  userId                  String    @map("user_id")
  tier                    String    // 'free', 'supporter', 'premium'
  status                  String    // 'active', 'cancelled', 'expired', 'past_due', 'unpaid'
  lemonSqueezyId          String?   @unique @map("lemonsqueezy_id") // LemonSqueezy subscription ID
  lemonSqueezyCustomerId  String?   @map("lemonsqueezy_customer_id")
  lemonSqueezyProductId   String?   @map("lemonsqueezy_product_id")
  lemonSqueezyVariantId   String?   @map("lemonsqueezy_variant_id")
  currentPeriodStart      DateTime? @map("current_period_start")
  currentPeriodEnd        DateTime? @map("current_period_end")
  trialEndsAt             DateTime? @map("trial_ends_at")
  renewsAt                DateTime? @map("renews_at")
  endsAt                  DateTime? @map("ends_at")
  isUsageBased            Boolean   @default(false) @map("is_usage_based")
  subscriptionItemId      String?   @map("subscription_item_id")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model WorryAnalysis {
  id                String   @id @default(uuid())
  postId            String   @unique @map("post_id")
  category          String
  subcategory       String?
  sentimentScore    Decimal? @map("sentiment_score") @db.Decimal(5, 2)
  keywords          String?  @db.NVarChar(Max) // Comma-separated values
  similarWorryCount Int      @default(0) @map("similar_worry_count")
  analysisVersion   String   @default("1.0") @map("analysis_version")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("worry_analysis")
}

model AnalyticsCache {
  id        String   @id @default(uuid())
  cacheKey  String   @unique @map("cache_key")
  data      String   @db.NVarChar(Max)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("analytics_cache")
}

model WorryResolution {
  id                 String   @id @default(uuid())
  postId             String   @unique @map("post_id")
  userId             String   @map("user_id")
  resolutionStory    String?  @map("resolution_story")
  copingMethods      String?   @map("coping_methods") @db.NVarChar(Max) // Comma-separated values
  helpfulnessRating  Int?     @map("helpfulness_rating") // 1-5
  resolvedAt         DateTime @default(now()) @map("resolved_at")
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("worry_resolutions")
}

model GuidedExercise {
  id              String   @id @default(uuid())
  title           String
  description     String
  category        String
  instructions    String   @db.NVarChar(Max)
  durationMinutes Int?     @map("duration_minutes")
  difficultyLevel String?  @map("difficulty_level") // 'beginner', 'intermediate', 'advanced'
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  completions UserExerciseCompletion[]

  @@map("guided_exercises")
}

model UserExerciseCompletion {
  id                  String   @id @default(uuid())
  userId              String   @map("user_id")
  exerciseId          String   @map("exercise_id")
  postId              String?  @map("post_id")
  effectivenessRating Int?     @map("effectiveness_rating") // 1-5
  notes               String?
  completedAt         DateTime @default(now()) @map("completed_at")

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise GuidedExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  post     Post?          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_exercise_completions")
}

model MentalHealthResource {
  id              String   @id @default(uuid())
  name            String
  type            String   // 'crisis_hotline', 'therapy', 'support_group', 'online_resource'
  description     String?
  phoneNumber     String?  @map("phone_number")
  websiteUrl      String?  @map("website_url")
  location        String?
  countryCode     String?  @map("country_code")
  isCrisisResource Boolean @default(false) @map("is_crisis_resource")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("mental_health_resources")
}

model Notification {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  type         String    // check_in, support, encouragement, community, reminder
  title        String
  message      String
  isRead       Boolean   @default(false) @map("is_read")
  sentAt       DateTime? @map("sent_at")
  scheduledFor DateTime? @map("scheduled_for")
  metadata     String    @default("{}") @db.NVarChar(Max)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationPreferences {
  id                   String  @id @default(uuid())
  userId               String  @unique @map("user_id")
  emailNotifications   Boolean @default(true) @map("email_notifications")
  pushNotifications    Boolean @default(true) @map("push_notifications")
  checkInFrequency     String  @default("weekly") @map("check_in_frequency") // daily, weekly, biweekly, monthly, never
  supportNotifications Boolean @default(true) @map("support_notifications")
  quietHoursStart      String? @map("quiet_hours_start") // HH:MM format
  quietHoursEnd        String? @map("quiet_hours_end")   // HH:MM format
  timezone             String  @default("UTC")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model SupportedLanguage {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  nativeName String   @map("native_name")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  userPreferences UserLanguagePreference[]

  @@map("supported_languages")
}

model UserLanguagePreference {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  languageCode String   @map("language_code")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  language SupportedLanguage @relation(fields: [languageCode], references: [code])

  @@map("user_language_preferences")
}

model WorryPrompt {
  id          String   @id @default(uuid())
  text        String   @unique
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("worry_prompts")
}

model ModerationQueue {
  id              String    @id @default(uuid())
  commentId       String    @map("comment_id")
  flaggedReasons  String?   @map("flagged_reasons") @db.NVarChar(Max) // Comma-separated values
  status          String    @default("pending") // 'pending', 'reviewed'
  reviewedBy      String?   @map("reviewed_by")
  reviewedAt      DateTime? @map("reviewed_at")
  reviewNotes     String?   @map("review_notes")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId])
  @@map("moderation_queue")
}

model CommentReport {
  id         String   @id @default(uuid())
  commentId  String   @map("comment_id")
  reporterId String   @map("reporter_id")
  reason     String   // 'spam', 'harassment', 'inappropriate', 'misinformation', 'other'
  details    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  comment  Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reporter User    @relation("CommentReports", fields: [reporterId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([commentId, reporterId]) // Prevent duplicate reports from same user
  @@map("comment_reports")
}

// Guided Exercises and Coping Techniques
model Exercise {
  id          String   @id @default(uuid())
  title       String
  description String
  category    String
  duration    Int      // in minutes
  difficulty  String   // beginner, intermediate, advanced
  steps       ExerciseStep[]
  tags        String?  @db.NVarChar(Max) // Comma-separated values
  imageUrl    String?
  videoUrl    String?
  audioUrl    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  progress    ExerciseProgress[]

  @@map("exercises")
}

model ExerciseStep {
  id          String   @id @default(uuid())
  exerciseId  String   @map("exercise_id")
  order       Int
  title       String
  content     String   @db.NVarChar(Max)
  duration    Int?     // in seconds
  imageUrl    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_steps")
}

model CopingTechnique {
  id                String     @id @default(uuid())
  title             String
  description       String
  category          String
  instructions      String     @db.NVarChar(Max)
  whenToUse         String?  @db.NVarChar(Max) // Comma-separated values
  effectiveness     Int        // 1-5 scale
  scienceBasedRating Int       @map("science_based_rating") // 1-5 scale
  tags              String?  @db.NVarChar(Max) // Comma-separated values
  imageUrl          String?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  resources         Resource[]

  @@map("coping_techniques")
}

model Resource {
  id                String   @id @default(uuid())
  copingTechniqueId String?  @map("coping_technique_id")
  title             String
  description       String
  url               String
  type              String   // article, video, audio, book, app, website
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  copingTechnique   CopingTechnique? @relation(fields: [copingTechniqueId], references: [id], onDelete: SetNull)

  @@map("resources")
}

model ExerciseProgress {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  exerciseId  String    @map("exercise_id")
  currentStep Int       @map("current_step")
  completed   Boolean   @default(false)
  startedAt   DateTime  @map("started_at")
  completedAt DateTime? @map("completed_at")
  notes       String?
  rating      Int?      // 1-5 scale
  effectiveness Int?    // 1-5 scale
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_progress")
}